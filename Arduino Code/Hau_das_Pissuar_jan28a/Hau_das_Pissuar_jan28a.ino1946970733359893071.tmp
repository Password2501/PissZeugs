/**********************************************************
Some nice Intro text that lets you want to piss the hell out of your bladder.
**********************************************************/
#include "LiquidCrystal.h"
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);

// which pin to use for reading the sensor? can use any pin!
#define FLOWSENSORPIN 7

// count how many pulses!
volatile uint16_t pulses = 0;
// track the state of the pulse pin
volatile uint8_t lastflowpinstate;
// you can try to keep time of how long it is between pulses
volatile uint32_t lastflowratetimer = 10;
// and use that to calculate a flow rate
volatile float timer;

// Declare global variables
bool session = false; // describes if a session is activ or not
String vollname;

char highscore[10]= {}; //stores the highscore
struct gameinfo;

// Interrupt is called once a millisecond, looks for any pulses from the sensor!
SIGNAL(TIMER0_COMPA_vect) {
  uint8_t x = digitalRead(FLOWSENSORPIN);
  
  if (x == lastflowpinstate) {
    //lastflowratetimer++;
    return; // nothing changed!
  }
  
  if (x == HIGH) {
    //low to high transition!
    pulses++;
    
  }
  lastflowpinstate = x;
  lastflowratetimer = 0;
}

void useInterrupt(boolean v) {
  if (v) {
    // Timer0 is already used for millis() - we'll just interrupt somewhere
    // in the middle and call the "Compare A" function above
    OCR0A = 0xAF;
    TIMSK0 |= _BV(OCIE0A);
  } else {
    // do not call the interrupt function COMPA anymore
    TIMSK0 &= ~_BV(OCIE0A);
  }
} 

void setup() {
   //Serial.begin(9600);
  // Serial.print("Flow sensor test!");
   lcd.begin(16, 2);
   // declare pin 9 to be an output for the contrast:
   pinMode(9, OUTPUT);  
   analogWrite(9, 50);  
   
   pinMode(FLOWSENSORPIN, INPUT);
   digitalWrite(FLOWSENSORPIN, HIGH);
   lastflowpinstate = digitalRead(FLOWSENSORPIN);
   useInterrupt(true);

};

void loop()             // run over and over again
{ 
  // Calculates miliLiters from the pulses
  float mliters = pulses *2.556;
  
  //counts the time since the last signal
  lastflowratetimer++;
  timer = (lastflowratetimer/10);  // in seconds

  // Starts the Game else stays in Idle mode
  if  (timer > 5){
    IdleMode();
  };
  
  //Start a session
   if (timer == 0){
   int gameStart(mliters); //gameinfo = gameStart(mliters,session);
    //session = gameinfo.session;
    //vollname = gameinfo.vollname;
   };
   
  // End a session
   if  (timer = 5){
    // save the score to the highscore array
    highscore[0] = ( vollname + " " + mliters + "ml");
    session = false;
  };
  
   delay(100);
};

void IdleMode(){
  showHigh();
  lcd.setCursor(0,0);
  lcd.print("Idle Time: "); lcd.print( timer ); lcd.print("      ");
};

void showHigh() {
  lcd.setCursor(0,1);
  lcd.print(highscore[0]);
  lcd.print("highscore[0]");
  return;
  };

void gameStart(int mliters/*, bool session*/){ //bool
  
  if (session == false){
  vollname = name();
  session = true;
  };
  lcd.setCursor(0,1);
  lcd.print("Spiel gestartet!     ");
  
 // String gameinfo.vollname = vollname;
 // bool gameinfo.session = session;
  printLCD(mliters,vollname);
 
 //magic
  return;//gameinfo;
  };

void printLCD(int ergebnis, String vollname){ 
  lcd.setCursor(0,0);
  lcd.print(vollname);
  lcd.setCursor(10,0);
  lcd.print(ergebnis); lcd.print(" ml  ");
  delay(100);
  return;
  };

  // function to determine a random and, not yet implemented, unique name
String name() {
  String vorName[] ={
        "Wurst",
        "Piss",
        "Bier",
        "Teddy",
        "Ochs'",
        "Arsch",
        "Sauf",
        "Haus",
        "Kack",
        "Klein"
      };
  String nachName[] = {
        "meister",
        "knecht",
        "kopf",
        "wurst",
        "bauer",
        "heini",
        "hans",
        "depp",
        "typ",
        "dirne",
        "b√§r"
      };
  int array1 = random(10);
  int array2 = random(10);
  String vollname = vorName[array1]+nachName[array2];
  return (vollname);

};
